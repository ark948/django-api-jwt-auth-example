1. new virtual environment and activate it
> python -m venv env
> env/Scripts/activate

2. provide requirements.txt or install packages manually one by one
> pip install -r requirements.txt

3. initialize git repo and create .gitignore file

4. create new django project

5. make base commit and push, 01 commit

6. navigate to backend dir, and add api app
> python manage.py startapp api

7. settings.py > import timedelta from datetime and load_dotenv from dotenv
and also os
(for refresh token time length and env variables i think)
also add load_dotenv() to settings.py file as well

8. update allowed_hosts to allow all using "*"

9. add rest_framework config var and SIMPLE_JWT config var

10. 02 commit

11. add api and others to installed_apps (rest_framework, corsheaders, simple_jwt)

12. add cors middleware to middlewares config var (above common middleware)
and also above whitenoise middleware that will be added later

13. add cors_allowed_all_origins to settings.py
and cors_allows_credentials

14. 03 commit

15. add serializers.py to api app and add user serializer to it

16. 04 commit

17. add UserCreateView to api/views.py

18. update main urls.py file

05 commit

19. make and run migrations
(small bug fixed in main urls.py file)

20. check the following routes:

http://127.0.0.1:8000/api/user/register/ (to register new users)
create a new user: bob-loop123*

http://127.0.0.1:8000/api/token/ (to obtain tokens)
make post request with the credentials of the user created previously

if POST was successful, two tokens should be returned, access token and refresh token.
this is what the frontend will store, (usually in LocalStorage)

http://127.0.0.1:8000/api/token/refresh/ (to refresh the access token using refresh token)
if you pass the refresh token of user 'bob' in this route, a new access token will be returned

21. add notes model to api/models.py
also add a serializer for it in serializers.py

06 commit

22. add views for notes (listcreateapi and one destoryapi)

07 commit

23. add urls.py file to api app
and include it in main urls.py

24. make and apply migrations

08 commit

25. the url to view user's notes is the following:
http://127.0.0.1:8000/api/notes/

but this will not be accessible (without passing access token),
and we will continue this with frontend.

26. create frontend template
> npm create vite@latest frontend -- --template react
> cd frontend
> npm install
> npm install axios react-router-dom jwt-decode

27. (css files can be deleted, but for now i'm keeping them, unless they cause error)
28. clear out App.jsx
29. inside frontend dir,
create three new dirs: pages, styles, components
craete some new files as well: constants.js, api.js

30. create an env file in frontend dir
09 commit

31. define frontend constants in constants.js (not sure what this is yet)
32. create axios api instance with an interceptor to include access token...
in every request in api.js and export it

10 commit